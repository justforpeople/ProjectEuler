using System;
using System.Collections.Generic;
using System.Text;

namespace ProjectEuler.Problems
{
    /// <summary>
    /// Even Fibonacci numbers
    /// Each new term in the Fibonacci sequence is generated by adding the previous two terms.
    /// By starting with 1 and 2, the first 10 terms will be:
    ///   1,1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    /// By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
    /// find the sum of the even-valued terms.
    /// </summary>
    class Problem2:IProblem
    {
        public long GetAnswer()
        {
            //long sum = 0;
            //long number = 0;
            //int i = 3;
            //do
            //{
            //    number = CommonFibonacci(i);
            //    if (number < 4000000000000)
            //    {
            //        sum += number;
            //    }
            //    else
            //        break;
            //    i += 3;
            //} while (true);
            //return sum;

            long sum = 0;
            int a = 1;
            int b = 1;
            int c = a + b;
            while (c < 400000000)
            {
                sum += c;
                a = b + c;
                b = a + c;
                c = a + b;
            }
            return sum;
        }
        ///// <summary>
        ///// 求Fibonacci(n)
        ///// </summary>
        ///// <param name="n"></param>
        ///// <returns></returns>
        //private long Fibonacci(int n)
        //{
        //    if (n == 1)
        //        return 1;
        //    else if (n == 2)
        //        return 2;
        //    else
        //        return Fibonacci(n - 1) + Fibonacci(2);
        //}
        ///// <summary>
        ///// 
        ///// </summary>
        ///// <param name="n"></param>
        ///// <returns></returns>
        //private long CommonFibonacci(int n)
        //{
        //    double ex = Math.Pow(5, 0.5);
        //    return (long)Math.Round(1 / ex * (Math.Pow((1 + ex) / 2, n) - Math.Pow((1 - ex) / 2, n)));
        //}
    }
}
